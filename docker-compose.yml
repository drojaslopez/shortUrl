# Define la versión del archivo Compose (opcional pero recomendable)
# version: "3.8"
# docker-compose up -d
# Sección para definir los servicios del proyecto
services:
  # Nombre del servicio (puedes cambiarlo según prefieras)
  db:
    # Imagen Docker que se usará para este servicio
    image: postgres:latest # Usa PostgreSQL versión 15
    # Nombre del contenedor
    container_name: desafioMeliBD # Nombre del contenedor
    # Variables de entorno para configurar la base de datos
    environment:
      POSTGRES_USER: adminMeli # Usuario predeterminado de la base de datos
      POSTGRES_PASSWORD: passwordMeli # Contraseña del usuario
      POSTGRES_DB: desafioMeli # Nombre de la base de datos que se creará

    # Puertos: mapea el puerto 5432 (dentro del contenedor) al 5434 (en tu máquina host)
    ports:
      - "5432:5432" # host:contenedor

    # Volúmenes: mapea una carpeta local a la ruta de datos de PostgreSQL en el contenedor
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
        # ./postgres-data es una carpeta en tu máquina local
        # /var/lib/postgresql/data es donde PostgreSQL guarda sus datos
        
  #dbNoSQL:
  #  image: mongo:latest
  #  container_name: desafioMeliNOBD
  #  ports:
  #    - "27017:27017"
  #  environment:
  #      # Descomenta estas líneas y cambia los valores para crear un usuario administrador.
  #      MONGO_INITDB_ROOT_USERNAME: adminMeli
  #      MONGO_INITDB_ROOT_PASSWORD: passwordMeli
  #    # Montar un volumen para persistir los datos.
  #  volumes:
  #      # 'mongo-data' es un volumen nombrado gestionado por Docker.
  #      # Esto asegura que los datos en /data/db dentro del contenedor se guarden
  #      # en el host y sobrevivan a reinicios o eliminaciones del contenedor.
  #      - ./mongo-data:/data/db
  #  restart: unless-stopped # Esto reiniciará el contenedor en caso de fallo
  #Define volúmenes externos (puedes agregar nombres aquí si los necesitas)


